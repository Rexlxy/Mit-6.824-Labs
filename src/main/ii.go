package main

import (
	"fmt"
	"mapreduce"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	kvs := []mapreduce.KeyValue{}
	runeList := []rune(value)
	i := 0
	for i < len(runeList) {
		word := []rune{}
		for i < len(runeList) && unicode.IsLetter(runeList[i]) {
			word = append(word, runeList[i])
			i++
		}

		if len(word) != 0 {
			kvs = append(kvs, mapreduce.KeyValue{string(word), "1 " + document})
		}
		i++
	}
	return kvs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	docList := make(map[string]bool)
	for _, v := range values {
		ss := strings.Split(v, " ")
		documents := strings.Split(ss[1], ",")
		for _, doc := range documents {
			docList[doc] = true
		}
	}

	// move from map to array for sorting
	docArray := []string{}
	for k := range docList {
		docArray = append(docArray, k)
	}
	sort.Strings(docArray)
	return strconv.Itoa(len(docArray)) + " " + strings.Join(docArray, ",")
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
